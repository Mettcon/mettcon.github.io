{"pageProps":{"note":{"id":"ispyuxecejflrr2t0trxrmg","title":"powershell","desc":"","updated":1663828031394,"created":1663743363872,"custom":{},"fname":"Notes from the field.powershell","type":"note","vault":{"fsPath":"vault"},"contentHash":"8ab6c4775c4494b03b83a455968368a9","links":[],"anchors":{"internal-optimization":{"type":"header","text":"internal optimization","value":"internal-optimization","line":8,"column":0,"depth":2}},"children":[],"parent":"cj841uoi4a89gvhzf6qss2u","data":{}},"body":"<h1 id=\"powershell\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#powershell\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>powershell</h1>\n<h2 id=\"internal-optimization\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#internal-optimization\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>internal optimization</h2>\n<p>Es kam mal wieder das Thema <code>$array += $something</code> auf. Inzwischen sollte weitgehend bekannt sein, dass es böse ist. Es steht sogar im Handbuch.\n<a href=\"https://learn.microsoft.com/en-us/powershell/scripting/dev-cross-plat/performance/script-authoring-considerations?view=powershell-7.2#array-addition\">Aufklärung</a><br>\nKurze Erklärung:<br>\nArrays sind Immutable (unveränderbar). Also wird in jeder Runde aus dem Array und dem hinzuzufügendem Objekt ein neues Array erstellt.\nInteraktiv mit einer Handvoll Objekten fällt das kaum ins Gewicht, bei mehr Objekten wird es aber schnell problematisch.<br>\n(Ausserdem zeigt es mangelndes Verständnis darüber wie Powershell funktionert. Nutzt die Pipeline )</p>\n<p>Zum Thema:\nDie Benchmarks wurden mit <code>Measure-Command { &#x3C;# code to Bench #> }</code> gemacht und ich erinnerte mich an einen Kommentar von <a href=\"https://github.com/SeeminglyScience\">SeeminglyScience</a> dass in dem Test die Optimierung fehlt. Die Lösung ist es den zu testenden Code in einen Scriptblock zu packen. <code>Measure-Command { { &#x3C;# code to Bench #>} }</code><br>\nEin paar Fehlversuche später habe ich noch mal nachgefragt und <a href=\"https://gist.github.com/Mettcon/0e333fde41345e1e875289bf4828995a\">diese Benchmarks</a> () brachten das erwartete Ergebnis.<br>\nDie Optimierungen betreffen also hauptsächlich Variablen in fremden Scopes. Daher die übergaben. <code>{ $emptyArray = $emptyArray; $Iterations = $Iterations;...}</code>  </p>\n<p>Unoptimiert wird jeder Variablenzugriff mit <code>VariableOps.GetVariableValue</code> durchgeführt. Womit die Variablen über mehrere Scopes gesucht werden.<br>\nEine lokale Variable stattdessen ist nur ein Property Zugriff einer internen Klasse.<br>\nMeine große Erkenntnis hier war, dass das nicht nur für <code>Measure-Command</code> gilt, sondern für Powershell generell.<br>\nDer Performance Gewinn der Optimisierung wird fast immer nur marginal sein, aber es ist Performance for free, wenn man sich an guten Stil hält, überraschungen vermeidet und evtl. sogar Schwierigkeiten mit dem Strictmode vermeidet. </p>","noteIndex":{"id":"2ajryvqow43elplox2nvgt0","title":"Hello Visitor","desc":"","updated":1661772283606,"created":1648766726999,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"fb58128cb062cae72be31155f03654c1","links":[],"anchors":{"stay-a-while-and-listen":{"type":"header","text":"Stay a while and listen","value":"stay-a-while-and-listen","line":7,"column":0,"depth":1},"lookup":{"type":"header","text":"Lookup","value":"lookup","line":17,"column":0,"depth":2}},"children":["kmodkqrr8soyq59b5twkopo","cj841uoi4a89gvhzf6qss2u"],"parent":null,"data":{},"body":"# Stay a while and listen\n\nAwesome, right? Even better, you can hire me. But don't get too excited yet.\nI may have not seen much of the IT Industry yet, but what I've seen so far was dissapointing.\nI want a place and colleagues from which I can learn at the job.\nI want to work with people who are interested and don't reject everything with \"I don't have time for that\".\nI'm sick of wasting my time Google bungling, because no one has a clue what we're doing and is stuck in ancient Times.\n\n\n\n## Lookup\n\nThis section contains useful links to related resources.\n\n- [Github](https://github.com/Mettcon)\n- Discord: Saine#4136\n\n\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enableSmartRefs":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"siteUrl":"https://mettcon.github.io","enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enablePrettyLinks":true,"duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"enableTaskNotes":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}