{"pageProps":{"note":{"id":"suyvdgeyipdebxr61uoo1xd","title":"csharp","desc":"","updated":1663743287642,"created":1661764973049,"tags":null,"custom":{},"fname":"Notes from the field.csharp","type":"note","vault":{"fsPath":"vault"},"contentHash":"29eb0196263bea3e78ee7df929205be6","links":[],"anchors":{},"children":[],"parent":"cj841uoi4a89gvhzf6qss2u","data":{}},"body":"<h1 id=\"csharp\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#csharp\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>csharp</h1>\n<h2 id=\"using-statement\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#using-statement\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>using statement</h2>\n<p>recently I stumbled upon a code snippet like this</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> rollbackProcess\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SPWeb</span> process <span class=\"token operator\">=</span> someSite<span class=\"token punctuation\">.</span><span class=\"token function\">Openweb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// prepare Rollback</span>\n        rollbackProcess <span class=\"token operator\">=</span> process\n        \n        <span class=\"token comment\">//... some code here</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// rollback</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>The using declaration calls the Dispose method on the object in the correct way when it goes out of scope. The using statement causes the object itself to go out of scope as soon as Dispose is called.</code></p>\n<p>If you dispose an object manually you should(must?) remove the reference with assigning a new value to \"unchain\" it and make it free for the GC to collect.\nMostly this looks like this</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">process<span class=\"token punctuation\">.</span><span class=\"token function\">dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nprocess <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n</code></pre>\n<p>but <code>using</code> is only aware of <code>process</code>, which means the object is still referenced in <code>rollbackProcess</code> and therefore, will never be disposed.</p>\n<h3 id=\"solution\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#solution\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Solution</h3>\n<p>How do we solve the problem?<br>\nIn this case, the developer just turned <code>rollbackProcess = process</code> into <code>rollbackProcessURL = process.URL</code> which is a <code>string</code> Type and it did the Trick.<br>\nI'm not sure <code>rollbackProcessURL</code> is still a reference to the <code>URL</code> Property of <code>process</code> and I don't know how to check that and if that works in other cases.  </p>\n<p>For better solutions it may help us to understand what's going on.\nSharplab shows us that <code>using</code>s are nothing more than a <code>try{} finally{}</code> </p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">M</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> Demo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Demo<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>get's lowered to</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">M</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span>\n        <span class=\"token punctuation\">{</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">finally</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>person <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>IDisposable<span class=\"token punctuation\">)</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>which means we can use the example above to this</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">SPWeb</span> process <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>   \n    someSite<span class=\"token punctuation\">.</span><span class=\"token function\">Openweb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">//... some code here</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// rollback</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// this is the new way to do</span>\n    <span class=\"token comment\">// if (process){ process.Dispose }</span>\n    process<span class=\"token punctuation\">?.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>","noteIndex":{"id":"2ajryvqow43elplox2nvgt0","title":"Hello Visitor","desc":"","updated":1661772283606,"created":1648766726999,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"fb58128cb062cae72be31155f03654c1","links":[],"anchors":{"stay-a-while-and-listen":{"type":"header","text":"Stay a while and listen","value":"stay-a-while-and-listen","line":7,"column":0,"depth":1},"lookup":{"type":"header","text":"Lookup","value":"lookup","line":17,"column":0,"depth":2}},"children":["kmodkqrr8soyq59b5twkopo","cj841uoi4a89gvhzf6qss2u"],"parent":null,"data":{},"body":"# Stay a while and listen\n\nAwesome, right? Even better, you can hire me. But don't get too excited yet.\nI may have not seen much of the IT Industry yet, but what I've seen so far was dissapointing.\nI want a place and colleagues from which I can learn at the job.\nI want to work with people who are interested and don't reject everything with \"I don't have time for that\".\nI'm sick of wasting my time Google bungling, because no one has a clue what we're doing and is stuck in ancient Times.\n\n\n\n## Lookup\n\nThis section contains useful links to related resources.\n\n- [Github](https://github.com/Mettcon)\n- Discord: Saine#4136\n\n\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enableSmartRefs":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"siteUrl":"https://mettcon.github.io","enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enablePrettyLinks":true,"duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"enableTaskNotes":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}