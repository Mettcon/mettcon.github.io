{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title","getFn":null},{"path":["body"],"id":"body","weight":1,"src":"body","getFn":null}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"Hello Visitor","n":0.707},"1":{"v":"# Stay a while and listen\n\nAwesome, right? Even better, you can hire me. But don't get too excited yet.\nI may have not seen much of the IT Industry yet, but what I've seen so far was dissapointing.\nI want a place and colleagues from which I can learn at the job.\nI want to work with people who are interested and don't reject everything with \"I don't have time for that\".\nI'm sick of wasting my time Google bungling, because no one has a clue what we're doing and is stuck in ancient Times.\n\n\n\n## Lookup\n\nThis section contains useful links to related resources.\n\n- [Github](https://github.com/Mettcon)\n- Discord: Saine#4136\n\n\n","n":0.099}}},{"i":2,"$":{"0":{"v":"Notes from the field","n":0.5}}},{"i":3,"$":{"0":{"v":"powershell","n":1},"1":{"v":"\n## internal optimization\nEs kam mal wieder das Thema `$array += $something` auf. Inzwischen sollte weitgehend bekannt sein, dass es böse ist. Es steht sogar im Handbuch.\n[Aufklärung](https://learn.microsoft.com/en-us/powershell/scripting/dev-cross-plat/performance/script-authoring-considerations?view=powershell-7.2#array-addition)  \nKurze Erklärung:  \nArrays sind Immutable (unveränderbar). Also wird in jeder Runde aus dem Array und dem hinzuzufügendem Objekt ein neues Array erstellt.\nInteraktiv mit einer Handvoll Objekten fällt das kaum ins Gewicht, bei mehr Objekten wird es aber schnell problematisch.  \n(Ausserdem zeigt es mangelndes Verständnis darüber wie Powershell funktionert. Nutzt die Pipeline )\n\nZum Thema:\nDie Benchmarks wurden mit `Measure-Command { <# code to Bench #> }` gemacht und ich erinnerte mich an einen Kommentar von [SeeminglyScience](https://github.com/SeeminglyScience) dass in dem Test die Optimierung fehlt. Die Lösung ist es den zu testenden Code in einen Scriptblock zu packen. `Measure-Command { { <# code to Bench #>} }`  \nEin paar Fehlversuche später habe ich noch mal nachgefragt und [diese Benchmarks](https://gist.github.com/Mettcon/0e333fde41345e1e875289bf4828995a) () brachten das erwartete Ergebnis.  \nDie Optimierungen betreffen also hauptsächlich Variablen in fremden Scopes. Daher die übergaben. `{ $emptyArray = $emptyArray; $Iterations = $Iterations;...}`  \n\nUnoptimiert wird jeder Variablenzugriff mit `VariableOps.GetVariableValue` durchgeführt. Womit die Variablen über mehrere Scopes gesucht werden.  \nEine lokale Variable stattdessen ist nur ein Property Zugriff einer internen Klasse.  \nMeine große Erkenntnis hier war, dass das nicht nur für `Measure-Command` gilt, sondern für Powershell generell.  \nDer Performance Gewinn der Optimisierung wird fast immer nur marginal sein, aber es ist Performance for free, wenn man sich an guten Stil hält, überraschungen vermeidet und evtl. sogar Schwierigkeiten mit dem Strictmode vermeidet. ","n":0.064}}},{"i":4,"$":{"0":{"v":"csharp","n":1},"1":{"v":"\n\n## using statement\nrecently I stumbled upon a code snippet like this\n\n```csharp\nvar rollbackProcess\ntry {\n    using (SPWeb process = someSite.Openweb() ) {\n        // prepare Rollback\n        rollbackProcess = process\n        \n        //... some code here\n    }\n} catch {\n    // rollback\n}\n```\n`The using declaration calls the Dispose method on the object in the correct way when it goes out of scope. The using statement causes the object itself to go out of scope as soon as Dispose is called.`\n\nIf you dispose an object manually you should(must?) remove the reference with assigning a new value to \"unchain\" it and make it free for the GC to collect.\nMostly this looks like this\n```csharp\nprocess.dispose()\nprocess = null\n```\nbut `using` is only aware of `process`, which means the object is still referenced in `rollbackProcess` and therefore, will never be disposed.\n\n### Solution\nHow do we solve the problem?  \nIn this case, the developer just turned `rollbackProcess = process` into `rollbackProcessURL = process.URL` which is a `string` Type and it did the Trick.  \nI'm not sure `rollbackProcessURL` is still a reference to the `URL` Property of `process` and I don't know how to check that and if that works in other cases.  \n\nFor better solutions it may help us to understand what's going on.\nSharplab shows us that `using`s are nothing more than a `try{} finally{}` \n```csharp\npublic class C {\n    public void M() {\n        using (Person Demo = new()) {\n            Console.WriteLine(Demo.Name);\n        }\n    }\n}\n```\nget's lowered to\n```csharp\npublic class C\n{\n    public void M()\n    {\n        Person person = new Person();\n        try\n        {\n            Console.WriteLine(person.Name);\n        }\n        finally\n        {\n            if (person != null)\n            {\n                ((IDisposable)person).Dispose();\n            }\n        }\n    }\n}\n```\nwhich means we can use the example above to this\n```csharp\nSPWeb process = null\ntry {   \n    someSite.Openweb()\n        //... some code here\n} catch {\n    // rollback\n} finally {\n    // this is the new way to do\n    // if (process){ process.Dispose }\n    process?.Dispose()\n}\n```\n","n":0.058}}},{"i":5,"$":{"0":{"v":"Recommendations","n":1},"1":{"v":"\n## Empfehlungen\nI will not add any TLDR.\nYou can just buy these, or research a bit. I don't care\n\n### Bücher\n\nNo longer Human  \nalles von Charles Bukowski  \nPhönix Project  \nShell of an idea  \nKomisch, alles chemisch!  \nThe Goal  (haven't read it yet, but it's a very well established management book [Time Magazine](https://content.time.com/time/specials/packages/article/0,28804,2086680_2086683_2087672,00.html) [Business Insider](https://www.businessinsider.com/jeff-bezos-favorite-business-books-2013-9) )  \nMaking Work visible.  \nBe the Master (Not the Alpha Macho Master Bullshit. The Master of his Craft. It's about teaching and be taught) (Could be \"own your Tech Career\" now)\n\nVielleicht sollte ich die unter verschiedenes packen  \n[Manifesto for Agile Software Development](https://agilemanifesto.org/principles.html)  \n[Release Pipeline Model](https://download.microsoft.com/download/C/4/A/C4A14099-FEA4-4CB3-8A8F-A0C2BE5A1219/The%20Release%20Pipeline%20Model.pdf)  \n\n\n\n\n### Talks\n\n[DEFCON 19: Steal Everything, Kill Everyone, Cause Total Financial Ruin! (w speaker)](https://www.youtube.com/watch?v=JsVtHqICeKE)  \n[The Art of Code - Dylan Beattie](https://www.youtube.com/watch?v=6avJHaC3C2U)  \n[Velocity 09:  John Allspaw and Paul Hammond, \"10+ Deploys Pe](https://www.youtube.com/watch?v=LdOe18KhtT4)\n\n\n### verschiedenes\n[Don't Copy Code without understanding it](https://twitter.com/foone/status/1229641258370355200)\n","n":0.087}}}]}
